---
#This Playbook is to perform a complete LAN Automation from defining the site to devices onboarded and Provisioned.
#The Playbooks can be run in full mode or specific group like discovery only using the --tag option in the command. 
#The corresponding inoput should be defined in the Vars file for script to run fully.
#Provide the Absolute path to the variable files using option --e VARS_FILE_PATH=/Users/pawansi/dnac_ansible_workflows/workflows/e2e_lan_automationed_site_bringup/vars/lan_automation_site_bringup_vars.yml
#Sample Command Run: ansible-playbook -i host_inventory_dnac1/hosts.yml workflows/e2e_lan_automationed_site_bringup/playbook/lan_automation_site_bringup.yml --e VARS_FILE_PATH=/Users/pawansi/dnac_ansible_workflows/workflows/e2e_lan_automationed_site_bringup/vars/lan_automation_site_bringup_vars.yml -vvvv --tags site
- name: Playbook to run LanautomationV2 Session on Catalyst Center Applicable for CC 2.3.7.5
  hosts: catalyst_center_hosts
  connection: local
  gather_facts: no
  vars_files:
    - "{{ VARS_FILE_PATH }}"
  vars:
    dnac_login: &dnac_login
      dnac_host: "{{ dnac_host }}"
      dnac_username: "{{ dnac_username }}"
      dnac_password: "{{ dnac_password }}"
      dnac_verify: "{{ dnac_verify }}"
      dnac_port: "{{ dnac_port }}"
      dnac_version: "{{ dnac_version }}"
      dnac_debug: "{{ dnac_debug }}"
    # For using APIs directly in the playbook
    state: merged
    dnac_url: "https://{{ dnac_host }}:443"
    credentials: "{{ dnac_username}}:{{dnac_password }}"
    authentication: "Basic {{ credentials | b64encode }}"
  tasks:
    - name: LAN Automation Script start time
      set_fact:
        long_op_start: "{{ now() }}"
    #Create sites required to onboard your devices using LAN Automation
    - name: Create sites from design_sites config
      cisco.dnac.site_workflow_manager:
        <<: *dnac_login
        state: "{{state}}"
        config:
          - "{{ item }}"
      loop: "{{ design_sites }}"
      tags: site
    # Create or Update existing Credentials with provided details in 
    - name: Create or Update existing Credentials with provided details in "{{ VARS_FILE_PATH }}"
      cisco.dnac.device_credential_workflow_manager:
        <<: *dnac_login
        state: "{{ state }}"
        config:
        - "{{ item }}"
      loop: "{{ device_credentials.credentials_details }}"
      when: device_credentials.credentials_details is defined
      tags: credential
    # Assign Credentials to sites if defined in 
    - name: Assign Credentials to sites for credentials and sites maps in variables file "{{ VARS_FILE_PATH }}"
      cisco.dnac.device_credential_workflow_manager:
        <<: *dnac_login
        state: "{{ state }}"
        config:
        - "{{ item }}"
      with_list: "{{ device_credentials.credentials_site_assignment }}"
      when: device_credentials.credentials_site_assignment is defined
      tags: credential

    # Discovery Seed devices
    - name: Discover Multi IP Address Ranges if defined in the file "{{ VARS_FILE_PATH }}"
      cisco.dnac.discovery_workflow_manager:
        <<: *dnac_login
        state: "{{ state }}"
        config:
        - "{{ item }}"
      loop: "{{ discovery_details.multi_range }}"
      when: discovery_details.multi_range is defined
      tags: discovery
    #Start LAN Automation Here
    - name: Lan Automation start time
      set_fact:
        long_op_start: "{{ now() }}"
      tags: mgmtIpUpdate , start , provision
    - name: Authenticate with DNA Center
      uri:
        url: "{{ dnac_url }}/dna/system/api/v1/auth/token"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "{{authentication}}"
        validate_certs: "{{ dnac_verify}}"
        status_code: 200
      register: auth_response
      tags: mgmtIpUpdate , start
    - name: Parse DNA Center Authentication Token
      set_fact:
        dnac_auth_token: "{{ auth_response.json.Token }}"
      tags: mgmtIpUpdate , start

    - name: Start LAN Automation Session
      uri:
        url: "{{ dnac_url }}/dna/intent/api/v2/lan-automation"
        method: POST
        headers:
          Content-Type: "application/json"
          X-Auth-Token: "{{ dnac_auth_token }}"
        body_format: json
        body: "{{ lan_automation }}"
        validate_certs: "{{ dnac_verify}}"
        status_code: 202
      register: lan_automation_response
      tags: start
    - name: Print LAN Automation Session ID
      debug:
        msg: "LAN Automation Session ID: {{ lan_automation_response.json.response.taskId }}"
      tags: start
    #Check till task is complete with wait time 10 seconds
    - name: Get all Task Tree
      cisco.dnac.task_tree_info:
        <<: *dnac_login
        taskId: "{{ lan_automation_response.json.response.taskId }}"
      register: task_tree_info
      until: task_tree_info.dnac_response.response[0].endTime is defined
      retries: 600
      delay: 30
      tags: start
    - name: Validate that there is no active session once LAN automation is complete
      uri:
        url: "{{ dnac_url }}/dna/intent/api/v1/lan-automation/sessions"
        method: GET
        headers:
          Content-Type: "application/json"
          X-Auth-Token: "{{ dnac_auth_token }}"
        body_format: json
        validate_certs: "{{ dnac_verify}}"
        status_code: 200
      register: lan_automation_active_sessions
    - name: Print LAN Automation Active Sessions
      debug:
        msg: "LAN Automation Session ID: {{ lan_automation_active_sessions.json.response }}"
    #/dna/intent/api/v1/lan-automation/status
    - name: Get LAN Automation Status
      uri:
        url: "{{ dnac_url }}/dna/intent/api/v1/lan-automation/status"
        method: GET
        headers:
          Content-Type: "application/json"
          X-Auth-Token: "{{ dnac_auth_token }}"
        body_format: json
        body:
          offset: 1
          limit: 1
        validate_certs: "{{ dnac_verify}}"
        status_code: 200
      register: lan_automation_status
      until: lan_automation_status.json.response[0].status | regex_search("^Completed") is match
    - name: Print LAN Automation lan_automation_status
      debug:
        msg: "LAN Automation lan_automation_status: {{ lan_automation_status.json.response[0].discoveredDeviceList }}"
    - name: LAN Automation complete
      set_fact:
        long_op_end: "{{ now() }}"
    - name: Print execution time
      debug:
        msg: "LAN Automation operation start: {{ long_op_start }}, end: {{ long_op_end }}"

    #/dna/intent/api/v1/lan-automation/updateDevice?feature=LOOPBACK0_IPADDRESS_UPDATE
    - name: Update Seed deviced management IP to a Loopback IP
      uri:
        url: "{{ dnac_url }}/dna/intent/api/v1/lan-automation/updateDevice?feature=LOOPBACK0_IPADDRESS_UPDATE"
        method: PUT
        headers:
          Content-Type: "application/json"
          X-Auth-Token: "{{ dnac_auth_token }}"
        body_format: json
        body: "{{ seed_mgmt_ip_update }}"
        validate_certs: "{{ dnac_verify}}"
        status_code: 202
      register: mgmt_update_response
      tags: mgmtIpUpdate

    - name: Print LAN Automation Session ID
      debug:
        msg: "LAN Automation Session ID: {{ mgmt_update_response.json.response.taskId }}"
      tags: mgmtIpUpdate
    #Check till task is complete with wait time 10 seconds
    - name: Get all Task Tree
      cisco.dnac.task_tree_info:
        <<: *dnac_login
        taskId: "{{ mgmt_update_response.json.response.taskId }}"
      register: task_tree_info
      until: task_tree_info.dnac_response.response[0].endTime is defined
      retries: 600
      delay: 30
      tags: mgmtIpUpdate

    - name: LAN Automation mgmt ip update complete
      set_fact:
        long_op_end: "{{ now() }}"
      tags: mgmtIpUpdate
      
    - name: Print execution time
      debug:
        msg: "LAN Automation mgmt ip update Start: {{ long_op_start }}, end: {{ long_op_end }}"
      tags: mgmtIpUpdate

    - name: Update device roles to ACCESS
      cisco.dnac.inventory_workflow_manager:
        <<: *dnac_login
        state: merged
        config:
          - "{{ item }}"
      loop: "{{ update_devices_role }}"
      when: update_devices_role is defined
      tags: provision

    - name: Assign devices to sites and Provision devices
      cisco.dnac.inventory_workflow_manager:
        <<: *dnac_login
        state: merged
        config:
          - "{{ item }}"
      loop: "{{ provision_devices }}"
      when: provision_devices is defined
      tags: provision

    - name: LAN Automation device provision end time
      set_fact:
        long_op_end: "{{ now() }}"
      tags: mgmtIpUpdate

    - name: Print execution time
      debug:
        msg: "LAN Automation provision time: {{ long_op_start }}, end: {{ long_op_end }}"
      tags: mgmtIpUpdate

  post_tasks:
    - name: run command module to find python version
      ansible.builtin.command: which python
      register: ansible_play_path
      delegate_to: catalyst_center_hosts
      connection: local
